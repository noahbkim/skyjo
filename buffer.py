import numpy as np


class ReplayBuffer:
    """A replay buffer to hold the experience generated by the played games.

        Each element in the buffer is a list of training data points generated
    from a single game. Once the buffer is full, the oldest game is discarded.

        Sampling from the buffer returns a random batch of training data points
    from across all games.

    This is NOT thread safe.
    """

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.buffer = []
        self.games_count = 0

    def add(self, game_data: list[tuple]):
        """Adds a game's worth of training data to the buffer."""
        # TODO: make the buffer faster
        if len(self.buffer) >= self.max_size:
            self.buffer = self.buffer[: len(game_data)]
            self.games_count -= 1
        self.buffer.extend(game_data)
        self.games_count += 1

    def sample_element(self):
        assert len(self.buffer) > 0, "Buffer is empty"
        # Select a random index first
        index = np.random.randint(len(self.buffer))
        return self.buffer[index]

    def sample_batch(self, batch_size: int):
        assert len(self.buffer) > 0, "Cannot sample from an empty buffer."
        assert batch_size <= len(self.buffer), (
            f"Batch size {batch_size} cannot be larger than buffer size {len(self.buffer)} when sampling without replacement."
        )
        indices = np.random.choice(len(self.buffer), size=batch_size, replace=False)
        # Retrieve elements using the sampled indices
        batch = [self.buffer[i] for i in indices]
        return batch
