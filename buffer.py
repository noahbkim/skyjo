import random


class ReplayBuffer:
    """A replay buffer to hold the experience generated by the played games.

        Each element in the buffer is a list of training data points generated
    from a single game. Once the buffer is full, the oldest game is discarded.

        Sampling from the buffer returns a random batch of training data points
    from across all games.

    This is NOT thread safe.
    """

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.buffer = []

    @property
    def games_count(self):
        return len(self.buffer)

    def add(self, game_data: list[tuple]):
        """Adds a game's worth of training data to the buffer."""
        if len(self.buffer) >= self.max_size:
            self.buffer.pop(0)
        self.buffer.append(game_data)

    def sample_element(self):
        assert len(self.buffer) > 0, "Buffer is empty"
        sample_game = random.choice(self.buffer)
        sample_point = random.choice(sample_game)
        return sample_point

    def sample_batch(self, batch_size: int):
        return [self.sample_element() for _ in range(batch_size)]
